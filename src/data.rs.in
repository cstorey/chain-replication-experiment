#[derive(Debug,PartialEq,Eq,PartialOrd,Ord,Hash,Clone,Copy,Default, Serialize, Deserialize)]
pub struct Seqno(u64);

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub enum Operation {
    Set(String),
    Get
}

#[derive(Debug, Serialize, Deserialize)]
pub enum OpResp {
    Ok(Epoch, Seqno, Option<String>),
    HelloIWant(Seqno),
    Err(Epoch, Seqno, String),
}

#[derive(Eq,PartialEq, Clone, Debug, Serialize, Deserialize)]
pub enum Role {
    Client,
    Upstream,
}

#[derive(Debug, Clone, PartialEq, Eq, Default, Serialize, Deserialize)]
pub struct NodeViewConfig {
    pub peer_addr: Option<String>,
    pub client_addr: Option<String>,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum PeerMsg {
    Prepare (Seqno, Vec<u8>),
    CommitTo (Seqno),
}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub struct ReplicationMessage {
    pub epoch: Epoch,
    pub msg: PeerMsg,
}

#[cfg(test)]
mod test {
    use data::Operation;
    use quickcheck::{self, Arbitrary, Gen};

    impl Arbitrary for Operation {
        fn arbitrary<G: Gen>(g: &mut G) -> Operation {
            match u64::arbitrary(g) % 2 {
                0 => Operation::Set(format!("{:x}", u64::arbitrary(g))),
                1 => Operation::Get,
                _ => unimplemented!(),
            }
        }
        fn shrink(&self) -> Box<Iterator<Item = Self> + 'static> {
            match self {
                &Operation::Set(ref s) => Box::new(s.shrink().map(Operation::Set)),
                &Operation::Get => quickcheck::empty_shrinker(),
            }
        }
    }
}
